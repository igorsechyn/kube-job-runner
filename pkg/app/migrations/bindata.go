// Code generated by go-bindata.
// sources:
// ../../../migrations/20181127105459_executions_schema.down.sql
// ../../../migrations/20181127105459_executions_schema.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20181127105459_executions_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20181127105459_executions_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20181127105459_executions_schemaDownSql,
		"20181127105459_executions_schema.down.sql",
	)
}

func _20181127105459_executions_schemaDownSql() (*asset, error) {
	bytes, err := _20181127105459_executions_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20181127105459_executions_schema.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1543276499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20181127105459_executions_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6a\x85\x30\x10\x45\xf7\xf9\x8a\x59\x56\xf0\x0f\x5c\x45\x9d\x96\xa1\x69\x2c\x49\x04\x5d\x95\xb4\x06\x49\x41\x2d\x24\x82\x9f\x5f\xda\xf7\x78\x28\xc9\xac\xcf\xdc\xb9\x73\x1a\x85\xdc\x20\x18\x5e\x0b\x04\x7a\x06\xd9\x19\xc0\x81\xb4\xd1\xe0\x0e\xf7\xb5\x47\xbf\xad\x01\x9e\x18\x80\x9f\x20\x3b\x35\xbd\x68\x54\xc4\x05\xbc\x2b\x7a\xe3\x6a\x84\x57\x1c\x4b\x06\x10\xfd\xe2\x42\xb4\xcb\x4f\xba\x40\xd2\xfc\x5f\x92\xbd\x10\x7f\x68\x88\x36\xee\x21\xcd\x36\x38\x5c\x41\xbf\xd8\xd9\x65\x4a\x24\x60\xb4\x73\xb6\x6d\x02\x7e\x6f\x9f\x94\xfb\xac\xef\xa9\x7d\x80\xac\xa8\x18\xbb\xab\x22\xd9\xe2\x70\x92\xf3\xe1\xd7\xc9\x1d\xd0\xc9\x8b\xb0\x5b\x2c\xd7\x4d\x79\xf2\xd0\xa2\x6e\x8a\x8a\xfd\x06\x00\x00\xff\xff\x68\xef\x4e\x8d\x74\x01\x00\x00")

func _20181127105459_executions_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20181127105459_executions_schemaUpSql,
		"20181127105459_executions_schema.up.sql",
	)
}

func _20181127105459_executions_schemaUpSql() (*asset, error) {
	bytes, err := _20181127105459_executions_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20181127105459_executions_schema.up.sql", size: 372, mode: os.FileMode(420), modTime: time.Unix(1543538526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20181127105459_executions_schema.down.sql": _20181127105459_executions_schemaDownSql,
	"20181127105459_executions_schema.up.sql":   _20181127105459_executions_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20181127105459_executions_schema.down.sql": {_20181127105459_executions_schemaDownSql, map[string]*bintree{}},
	"20181127105459_executions_schema.up.sql":   {_20181127105459_executions_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
